// Generated by CoffeeScript 1.9.2
(function() {
  var EventTarget, RTCDataChannel, RTCIceCandidate, RTCPeerConnection, RTCSessionDescription, directory, peerId,
    slice = [].slice;

  directory = new Map;

  peerId = 0;

  EventTarget = {
    addEventListener: function(event, callback) {
      var set;
      this.handlers || (this.handlers = new Map);
      set = this.handlers.get(event);
      if (set == null) {
        set = new Set;
        this.handlers.set(event, set);
      }
      return set.add(event, callback);
    },
    removeEventListener: function(event, callback) {
      var ref, set;
      set = (ref = this.handlers) != null ? ref.get(event) : void 0;
      if (set != null) {
        set["delete"](event, callback);
        if (set.size === 0) {
          return this.handlers["delete"](event);
        }
      }
    },
    trigger: function() {
      var args, event, ref, ref1;
      event = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return (ref = this.handlers) != null ? (ref1 = ref.get(event)) != null ? ref1.forEach(function(handler) {
        return handler.apply(null, args);
      }) : void 0 : void 0;
    }
  };

  RTCPeerConnection = (function() {
    var k, v;

    for (k in EventTarget) {
      v = EventTarget[k];
      RTCPeerConnection.prototype[k] = v;
    }

    function RTCPeerConnection(configuration) {
      this.signalingState = 'stable';
      this.id = peerId += 1;
      this.targetId = null;
      this.dataChannel = new RTCDataChannel(this);
      directory.set(this.id, this);
    }

    RTCPeerConnection.prototype.createDataChannel = function(name) {
      return this.dataChannel;
    };

    RTCPeerConnection.prototype.createOffer = function(cb) {
      return setTimeout((function(_this) {
        return function() {
          return cb(new RTCSessionDescription({
            sdp: _this.id,
            type: 'offer'
          }));
        };
      })(this));
    };

    RTCPeerConnection.prototype.createAnswer = function(cb) {
      return setTimeout((function(_this) {
        return function() {
          return cb(new RTCSessionDescription({
            sdp: _this.id,
            type: 'answer'
          }));
        };
      })(this));
    };

    RTCPeerConnection.prototype.setLocalDescription = function(localDescription, cb) {
      return setTimeout((function(_this) {
        return function() {
          if (_this.signalingState === 'stable') {
            _this.signalingState = 'have-local-offer';
          } else {
            _this.signalingState = 'stable';
            _this.trigger('icecandidate', {
              candidate: _this.id
            });
          }
          _this.trigger('signalingstatechange');
          return typeof cb === "function" ? cb() : void 0;
        };
      })(this));
    };

    RTCPeerConnection.prototype.setRemoteDescription = function(remoteDescription, cb) {
      return setTimeout((function(_this) {
        return function() {
          _this.targetId = remoteDescription.sdp;
          if (_this.signalingState === 'stable') {
            _this.signalingState = 'have-remote-offer';
          } else {
            _this.signalingState = 'stable';
            _this.trigger('icecandidate', {
              candidate: _this.id
            });
          }
          _this.trigger('signalingstatechange');
          return typeof cb === "function" ? cb() : void 0;
        };
      })(this));
    };

    RTCPeerConnection.prototype.addIceCandidate = function(candidate, cb) {
      return setTimeout((function(_this) {
        return function() {
          _this.trigger('datachannel', {
            channel: _this.dataChannel
          });
          setTimeout(function() {
            return _this.dataChannel.trigger('open');
          });
          return typeof cb === "function" ? cb() : void 0;
        };
      })(this));
    };

    RTCPeerConnection.prototype.close = function() {
      var target;
      this.signalingState = 'closed';
      this.trigger('signalingstatechange');
      this.dataChannel.trigger('close');
      target = directory.get(this.targetId);
      target.signalingState = 'closed';
      target.trigger('signalingstatechange');
      target.dataChannel.trigger('close');
      directory["delete"](this.id);
      return directory["delete"](this.targetId);
    };

    return RTCPeerConnection;

  })();

  RTCDataChannel = (function() {
    var k, v;

    for (k in EventTarget) {
      v = EventTarget[k];
      RTCDataChannel.prototype[k] = v;
    }

    function RTCDataChannel(connection) {
      this.connection = connection;
    }

    RTCDataChannel.prototype.send = function(data) {
      var target;
      target = directory.get(this.connection.targetId).dataChannel;
      return target.trigger('message', {
        data: data
      });
    };

    return RTCDataChannel;

  })();

  RTCSessionDescription = (function() {
    function RTCSessionDescription(arg) {
      var sdp, type;
      sdp = arg.sdp, type = arg.type;
      this.sdp = sdp;
      this.type = type;
    }

    return RTCSessionDescription;

  })();

  RTCIceCandidate = (function() {
    function RTCIceCandidate() {}

    return RTCIceCandidate;

  })();

  module.exports = {
    RTCPeerConnection: RTCPeerConnection,
    RTCSessionDescription: RTCSessionDescription,
    RTCIceCandidate: RTCIceCandidate
  };

}).call(this);
